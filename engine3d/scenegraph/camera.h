// Class automatically generated by Dev-C++ New Class wizard

#ifndef CAMERA_H
#define CAMERA_H

#include "node.h"
#include "engine3d/geometry/vector.h" // inheriting class's header file
#include "engine3d/geometry/plane.h"
#include "engine3d/geometry/transformation.h"
#include "engine3d/containment/boundingvolume.h"

namespace engine3d {
    
//class Scene;
/*
 * No description
 */
class Camera : public Node
{
	public:
		/**
		 * Creates a camera using perspective projection matrix
		 */
		Camera(double viewAngle = 90.0f, double aspect = 1.0f, double near = 0.5f, double far = 10.0f);
		
		/**
		 * Creates a camera using parallel projection matrix
		 */ 
		Camera(double left, double right, double bottom, double top, double near, double far);
		Camera(const Camera& rCam);
		
		// class destructor
		~Camera();
		
		/**
		 * Positions the camera (Calls the underlaying GL functions)
		 **/
		void Look();
		
		/**
		 * @return view angle in y-direction in degrees
		 **/
		double GetViewAngle() const {
            return mViewAngle;
        }
		
		/**
		 * @return ratio of x (width) to y (height)
		 **/
		double GetAspect() const {
            return mAspect;
        }
        
        /**
         * @return disctance of the near clipping plane measured from eye point
         **/
		double GetZNear() const {
            return mZNear;
        }
        
        /**
         * @return disctance of the far clipping plane measured from eye point
         **/
		double GetZFar() const {
            return mZFar;
        }
        
		/**
		 * @return the eye position
		 **/
		const Vector& GetEye() const {
            return mEye;
        }
        
		/**
		 * @deprecated DONT USE THIS METHOD. 
         * USE GetDirection instead which returns normalized
         * vector pointing towards the center of the scenr
		 **/
		const Vector& GetCenter() const {
            return mCenter;
        }
        
		/**
		 * @return the vector pointing up
		 **/
		const Vector& GetUp() const {
            return mUp;
        }
        
		/**
		 * @return the vector pointing to the right
		 **/
		const Vector GetRight() const {
            return GetDirection().CrossProduct(mUp);
        }
        
		/**
		 * @return normalized vector pointing towards the center 
         * of the scene
		 **/
		const Vector GetDirection() const {
            return (mCenter - mEye).Normalize();
        }
		
        const Plane GetFarPlane() const;
        const Plane GetNearPlane() const;
        const Plane GetTopPlane() const;
        const Plane GetBottomPlane() const;
        const Plane GetLeftPlane() const;
        const Plane GetRightPlane() const;

        /**
         * Sets the camera's world transformation. Transformation
         * defines the location and direction of the camera.
         * @param rTransformation new transformation of the camera. 
         **/
        //void SetTransformation(const Transformation& rTransformation);

        /**
         * Checks if the given volume is out of the camera's view.
         * @rVolume bounding volume to check for culling
         * @return ture if the given volume can be culled, false otherwise
         **/
        bool Cull(const BoundingVolume& rVolume);
        
        void Transform();
        
	private:
        
        /**
		 * View angle in y-direction in degrees
		 **/
        double mViewAngle;
        
        /**
         * Ratio of x to y
         **/
        double mAspect;
        
        /**
         * Disctance of the near clipping plane measured from eye point
         **/
        double mZNear;
        
        /**
         * Disctance of the far clipping plane measured from eye point
         **/
        double mZFar;
        
        /**
         * Eye point of the camera
         **/
        Vector mEye;
        
        /**
         * Vector defining the point where camera is directed
         **/
        Vector mCenter;
        
        /**
         * Up vector of the camera
         **/
        Vector mUp;
        
        /**
         * Specifies if perspective or parallel projection is used
         */
        bool mPerspective;
        
        /**
         * Fields used in case of parallel projection
         */         
        double mLeft;
        double mRight;
        double mBottom;
        double mTop;
        
};
}
#endif // CAMERA_H
