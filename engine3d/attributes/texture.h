// Class automatically generated by Dev-C++ New Class wizard

#ifndef TEXTURE_H
#define TEXTURE_H

#include <gl.h>
#include "base/object.h"
#include "bitmap/bitmap_image.hpp"

using namespace base;

namespace engine3d {

/*
 * No description
 */
class Texture : public Object
{
	public:
        //static const int FORMAT_COLOR_INDEX = GL_COLOR_INDEX;
        static const int FORMAT_RED = GL_RED;
        static const int FORMAT_GREEN = GL_GREEN;
        static const int FORMAT_BLUE = GL_BLUE;
        static const int FORMAT_ALPHA = GL_ALPHA;
        static const int FORMAT_RGB = GL_RGB;
        static const int FORMAT_RGBA = GL_RGBA;
        static const int FORMAT_LUMINANCE = GL_LUMINANCE;
        static const int FORMAT_LUMINANCE_ALPHA = GL_LUMINANCE_ALPHA;
	public:
		/**
		 * Creates a new texture
		 * @param textureFile bitmap file of the texture image. 
         * The height and width of the texture image must be multiples of 2.
		 * @param name name of the texture
		 * @param format texture format (one of the above constants)
		 **/
		Texture(const String& textureFile, const String& name = "", int format = FORMAT_RGB);
		// class destructor
		~Texture();
		
		/**
		 * Modulates this texture with another texture.
		 * RGBA texture can be constructed from
		 * RGB texture by modulating it with ALPHA texture
		 **/
		Texture& Modulate(const Texture& texture);

		/**
		 * @return pointer to the texture image data that can be used as an
		 * input parameter for glTextImage2D function
		 **/
		const unsigned char* GetPixels() {
            return mpImage->data();
        }
        
		// No description
		int GetHeight() {
            return mpImage->height();
        }
        
		// No description
		int GetWidth() {
            return mpImage->width();
        }
        
		// No description
		int GetFormat() {
            return mFormat;
        }

	private:
        Texture(int format, bitmap_image* pImage);

	protected:
        bitmap_image* mpImage;
        int mFormat;
};
}
#endif // TEXTURE_H
