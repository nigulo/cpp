// Class automatically generated by Dev-C++ New Class wizard

#include <gl.h>

#include "triangles.h" // class's header file

#include "engine3d/geometry/projector.h"
#include "engine3d/geometry/triangle.h"
#include "engine3d/scenegraph/scene.h"
#include "engine3d/scenegraph/camera.h"

using namespace engine3d;
// class constructor
Triangles::Triangles() : Mesh(GL_TRIANGLES)
{
}

//Triangles::Triangles(const Triangles& tr) : Vertices(tr)
//{
//}

void Triangles::Copy(const Triangles& ts)
{
    Mesh::Copy(ts);
}

Triangles* Triangles::Clone() const
{
    Debug("Triangles.Clone");
    Triangles* p_ts = new Triangles();
    p_ts->Copy(*this);
    return p_ts;
}


// class destructor
Triangles::~Triangles()
{
	//for (int i = 0; i < triangles.size(); i++) {
    //    delete triangles[i];
    //}
    //triangles.resize(0);
}


// Adds new triangle
void Triangles::Add(const Vertex& v1, const Vertex& v2, const Vertex& v3)
{
    AddVertex(v1);
    AddVertex(v2);
    AddVertex(v3);
}

void Triangles::Render() {
//    if (distant) {
//        Shape* s = GetDistantProjection();
//        s->Render();
//        delete s;
//    }
//    else {
        Mesh::Render();
//    }
}

/*
 * Projects the front face of the vertices to the far plane 
 * of the clipping area
 */
void Triangles::RenderDistant()
{
    Debug("T::RD 1");
	Triangles distantProjection;
    Debug("T::RD 2");
	Plane plane = GetScene().GetCamera().GetFarPlane();
	// NB!!! plane normal is pointing isnide the view
	// frustrum, so this is not the plane we want
    Debug("T::RD 3");
	Projector p;
    Debug("T::RD 4");
	p.AddPlane(plane);
    Debug("T::RD 5");
	//p.SetDirection(plane.GetNormal());
    Debug("T::RD 6");
	for (int i = 0; i < mChildren.Size(); i += 3) {
        Debug("T::RD 7");
        Vertex* v1 = static_cast<Vertex*>(mChildren[i]);
        Debug("T::RD 8");
        Vertex* v2 = static_cast<Vertex*>(mChildren[i + 1]);
        Debug("T::RD 9");
        Vertex* v3 = static_cast<Vertex*>(mChildren[i + 2]);
        Debug("T::RD 10");

        Debug((String) "T::RD v1: " + v1->GetWorldCoords()[0] + ", " + v1->GetWorldCoords()[1] + ", " + v1->GetWorldCoords()[2]);
        Debug((String) "T::RD v2: " + v2->GetWorldCoords()[0] + ", " + v2->GetWorldCoords()[1] + ", " + v2->GetWorldCoords()[2]);
        Debug((String) "T::RD v3: " + v3->GetWorldCoords()[0] + ", " + v3->GetWorldCoords()[1] + ", " + v3->GetWorldCoords()[2]);
        
        Triangle t(v1->GetWorldCoords(), v2->GetWorldCoords(), v3->GetWorldCoords());
        Debug("T::RD 11");

        Vector dir = v1->GetWorldCoords() - GetScene().GetCamera().GetEye();

        if (/*plane.GetNormal()*/dir.DotProduct(t.GetNormal()) < 0) {
            Debug("T::RD 12");

        	Vector direction = v1->GetWorldCoords() - GetScene().GetCamera().GetEye();
        	if (direction.DotProduct(plane.GetNormal()) > GetScene().GetCamera().GetProjection().GetZFar()) {
                Debug("T::RD 120");
        		direction = direction * -1.0;
        	}
            Debug("T::RD 121");
	        p.SetDirection(direction);
            Debug("T::RD 122");
            Vector distantVector1 = p.Project(v1->GetWorldCoords());
            Debug("T::RD 123");
            direction = v2->GetWorldCoords() - GetScene().GetCamera().GetEye();
        	if (direction.DotProduct(plane.GetNormal()) > GetScene().GetCamera().GetProjection().GetZFar()) {
                Debug("T::RD 1235");
        		direction = direction * -1.0;
        	}
            Debug("T::RD 124");
	        p.SetDirection(direction);
            Debug("T::RD 125");
            Vector distantVector2 = p.Project(v2->GetWorldCoords());
            Debug("T::RD 126");
            direction = v3->GetWorldCoords() - GetScene().GetCamera().GetEye();
        	if (direction.DotProduct(plane.GetNormal()) > GetScene().GetCamera().GetProjection().GetZFar()) {
                Debug("T::RD 1265");
        		direction = direction * -1.0;
        	}
            Debug("T::RD 127");
	        p.SetDirection(direction);
            Debug("T::RD 128");
            Vector distantVector3 = p.Project(v3->GetWorldCoords());
            Debug("T::RD 129");
            
            //distantVector1 = distantVector1 - (distantVector1 - GetScene().GetCamera().GetCenter()) * 0.1f;
            //distantVector2 = distantVector2 - (distantVector2 - GetScene().GetCamera().GetCenter()) * 0.1f;
            //distantVector3 = distantVector3 - (distantVector3 - GetScene().GetCamera().GetCenter()) * 0.1f;
            
            Debug((String) "T::RD dv1: " + distantVector1[0] + ", " + distantVector1[1] + ", " + distantVector1[2]);
            Debug((String) "T::RD dv2: " + distantVector2[0] + ", " + distantVector2[1] + ", " + distantVector2[2]);
            Debug((String) "T::RD dv3: " + distantVector3[0] + ", " + distantVector3[1] + ", " + distantVector3[2]);
            
            Vertex distantVertex1(*v1, distantVector1);
            Vertex distantVertex2(*v2, distantVector2);
            Vertex distantVertex3(*v3, distantVector3);

            distantProjection.Add(distantVertex1, distantVertex2, distantVertex3);
            Debug("T::RD 13");
        }
        Debug("T::RD 14");
    }
    distantProjection.Render();
}
