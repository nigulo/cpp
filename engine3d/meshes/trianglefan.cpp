// Class automatically generated by Dev-C++ New Class wizard

#include <GL/gl.h>

#include "trianglefan.h" // class's header file

#include "../geometry/projector.h"
#include "engine3d/geometry/triangle.h"

using namespace engine3d;
// class constructor
TriangleFan::TriangleFan() : Mesh(GL_TRIANGLE_FAN)
{
}

void TriangleFan::Copy(const TriangleFan& tf)
{
    Mesh::Copy(tf);
}

TriangleFan* TriangleFan::Clone() const
{
    Debug("TriangleFan.Clone");
    TriangleFan* p_tf = new TriangleFan();
    p_tf->Copy(*this);
    return p_tf;
}

// class destructor
TriangleFan::~TriangleFan()
{
}

void TriangleFan::Render() 
{
    //glBegin(GL_TRIANGLE_FAN);
    Mesh::Render();
    //glEnd();
}

/*
 * Projects the front face of the vertices to the far plane 
 * of the clipping area
 */
Shape* TriangleFan::GetDistantProjection()
{
	TriangleFan distantProjection;
//	Plane plane = GetRoot().GetCamera().GetFarPlane();
//	Projection p;
//	p.AddPlane(plane);
//	p.SetDirection(plane.GetNormal());
//	for (int i = 1; i < vertices.size(); i++) {
//        int j = i + 1;
//        if (i == vertices.size() - 1) {
//            j = 1;
//        }
//        Triangle t(*vertices[0], *vertices[i], *vertices[j]);
//        if (plane.GetNormal().ScalarProduct(t.GetNormal()) < 0) {
//            if (distantProjection.GetSize() <= 0) {
//                distantProjection.AddVertex(p.Project(vertices[0]->GetCoords()), vertices[0]->GetTexCoords());
//                distantProjection.AddVertex(p.Project(vertices[i]->GetCoords()), vertices[i]->GetTexCoords());
//            }
//            distantProjection.AddVertex(p.Project(vertices[j]->GetCoords()), vertices[j]->GetTexCoords());
//        }
//    }
    return NULL;//(Shape) distantProjection;
}
