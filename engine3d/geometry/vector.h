// Class automatically generated by Dev-C++ New Class wizard

#ifndef VECTOR_H
#define VECTOR_H

#include "base/object.h" // inheriting class's header file
#include "base/string.h"

using namespace base;

namespace engine3d {

/**
 * Represents geometrical vector
 **/
class Vector
{
	public:
		explicit Vector(int dim = 3, bool zeroCoords = true);
		Vector(int dim, double coords[]);
		Vector(double x, double y, double z, double w);
		Vector(double x, double y, double z);
		Vector(double x, double y);
		explicit Vector(double x);
		Vector(const Vector& v);
		// class destructor
		~Vector();
		
		friend bool operator==(const Vector& v1, const Vector& v2) {
            if (v1.mDim != v2.mDim) {
                return false;
            }
            for (int i = 0; i < v1.mDim; i++) {
                if (v1.mpCoords[i] != v2.mpCoords[i]) {
                    return false;
                }
            }
            return true;
        }

		friend bool operator!=(const Vector& v1, const Vector& v2) {
            return !(operator==(v1, v2));
        }
		
		Vector& operator=(const Vector& v);
		Vector operator-() const;
		Vector operator+(const Vector& v) const;
		Vector operator-(const Vector& v) const;
		Vector operator*(double c) const;
		Vector operator/(double c) const;
		Vector& operator+=(const Vector& v);
		Vector& operator-=(const Vector& v);
		Vector& operator*=(double c);
		Vector& operator/=(double c);
		double operator[](int i) const;
		// returns the coordinate of this vector at the specified index
		//double GetCoord(int index) const;
		void SetCoord(int index, double d);
		//double GetX() const;
		//double GetY() const;
		//double GetZ() const;
		//double GetW() const;
		//void Add(const Vector& v);
		//void Sub(const Vector& v);
		//void Mul(const double c);
		
		// Returns the squared norm of this vector
		double Length2() const;
		// Returns the norm of this vector
		double Length() const;
		Vector GetProjection(const Vector& axis) const;
		// Returns the dimention of this vector
		int GetDim() const;
		void Rotate(Vector& v, double angle);
		/**
         * @return the scalar product of this vector and given vector
         **/
		double DotProduct(const Vector& v) const;
		/**
		 * @return *this x v
		 **/
		Vector CrossProduct(const Vector& v) const;
		Vector& Normalize();
		String ToString() const;
		double* GetCoords() {
			return mpCoords;
		}
	protected:
        int mDim;
        double* mpCoords;
};
}
#endif // VECTOR_H
